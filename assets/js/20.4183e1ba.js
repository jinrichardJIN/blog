(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{179:function(r,n,t){"use strict";t.r(n);var a=t(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"js中排序算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js中排序算法","aria-hidden":"true"}},[r._v("#")]),r._v(" Js中排序算法")]),r._v(" "),t("p",[r._v("在看下面的排序之前 我们至少需要理解一下几个概念")]),r._v(" "),t("ul",[t("li",[r._v("什么是空间复杂度？")]),r._v(" "),t("li",[r._v("什么是时间复杂度？")]),r._v(" "),t("li",[r._v("为什么我们需要各种算法，为什么需要算法？")])]),r._v(" "),t("h3",{attrs:{id:"冒泡排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 冒泡排序")]),r._v(" "),t("p",[r._v("冒泡排序算是个人认为比较常用的排序了，代码实现也比较容易，难度🌟🌟")]),r._v(" "),t("blockquote",[t("ul",[t("li",[r._v("比较相邻的元素。如果第一个比第二个大，就交换它们两个；")]),r._v(" "),t("li",[r._v("对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；")]),r._v(" "),t("li",[r._v("针对所有的元素重复以上的步骤，除了最后一个；\n重复步骤1~3，直到排序完成。")])])]),r._v(" "),t("pre",[t("code",[r._v('let arr = [1, 3, 4, 6, 32, 34, 2, 3, 6, 1, 7];\n\nfor (let i = 0; i < arr.length; i++) {\n  let tmp = "";\n  for (let j = 0; j < arr.length - i; j++) {\n    if (arr[j] > arr[j + 1]) {\n      tmp = arr[j];\n      arr[j] = arr[j + 1];\n      arr[j + 1] = tmp;\n    }\n  }\n}\nconsole.log(arr);\n')])]),r._v(" "),t("h3",{attrs:{id:"快速排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 快速排序")]),r._v(" "),t("p",[r._v("快排序的原理也比较容易理解，难度🌟🌟🌟")]),r._v(" "),t("pre",[t("code",[r._v("    const arr = [1,2,4,3,7,9,12,5,0,87,22];\n    function quick(arr,left=[],right=[]){\n        if(arr.length<=1){\n            return arr;\n        }\n        let middle = arr[0];\n        for(let i = 1;i<arr.length;i++){\n            if(middle>=arr[i]){\n                left.push(arr[i]);\n            }else{\n                right.push(arr[i]);\n            }\n        }\n        return quick(left).concat(arr[0],quick(right));\n    }\n    console.log(quick(arr));\n")])]),r._v(" "),t("h3",{attrs:{id:"选择排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 选择排序")]),r._v(" "),t("p",[r._v("选择排序的原理也比较容易理解，难度🌟🌟🌟")]),r._v(" "),t("blockquote",[t("ul",[t("li",[r._v("初始状态：无序区为R[1..n]，有序区为空；")]),r._v(" "),t("li",[r._v("第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；")]),r._v(" "),t("li",[r._v("n-1趟结束，数组有序化了。")])])]),r._v(" "),t("pre",[t("code",[r._v("// 选择\nfor (let i = 0; i < arr.length; i++) {\n  let minIndex = i;\n  let tmp = arr[i];\n  for (let j = minIndex; j < arr.length; j++) {\n    tmp = arr[i];\n    if (arr[j] < arr[minIndex]) {\n      minIndex = j;\n      tmp = arr[i];\n    }\n  }\n  arr[i] = arr[minIndex];\n  arr[minIndex] = tmp;\n}\nconsole.log(arr);\n")])]),r._v(" "),t("h3",{attrs:{id:"插入排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入排序","aria-hidden":"true"}},[r._v("#")]),r._v(" 插入排序")])])}],!1,null,null,null);e.options.__file="排序算法.md";n.default=e.exports}}]);